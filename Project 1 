#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Nov 10 19:10:05 2020

@author: joshuastevens
"""
import numpy
import math
import random

#  YOU DON"T HAVE TO READ THIS. IF CODING IS NEW TO YOU AND THIS
#  WORRIES YOU, GO DOWN TO THE SMILEY FACE.
#
# This class is designed for one purpose, and  one purpose only:
#  - To generate normally distributed random variables with
#    a mean of 0 and a standard deviation of 1.
#  - This is done using the Box-Meuller algorithm for generating
#    such random numbers:
#       1. Given two uniformly distributed random variables from the
#          interval (0, 1], call these 'u1' and 'u2'.
#            - Uniformly distributed means every point has the same
#              likelihood of being selected.
#          The random.random() function returns a random value that
#          takes values in [0, 1), so '1 - random.random()' will
#          return a random value in (0, 1].
#
#                    ___________
#       2. Let c = \/-2 ln( u1 )
#          Then two independent normally distributed random
#          variables are
#                n1 = c cos( 2 pi u2 )
#                n2 = c sin( 2 pi u2 )
#
# The randn() function works as follows:
#   If the function is called twice:
#     1. On the first call, the two random values 'n1' and 'n2' are
#        calculated. One ('n2') is stored in a class variable
#        'second_random_variable', while the other ('n1') is returned.
#     2. On the second call, the second ('n1') is returned.
#
# This is done through the use of two class variables:
#     The class variable 'call_count' records how often this function
#     has been previously been called.
#
#     If 'call_count' is even, then the function has been called an
#     even number of times, and thus, there must have been a previous
#     call that produced two normally distributed random variables,
#     and thus, one must be stored in the class variable
#     'second_random_variable'. This is what is returned.
#
#     If 'call_count' is odd, then it is necessary to generate both
#     normally distributed random variables, storing one of them in
#     the class variable 'second_random_variable' and returning the
#     other.
#
# Note, in almost all mathematics libraries, the natural logarithm
# is implemented with a function called 'log', while the common
# logarithm or base-10 logarithm is implemented with a function called
# 'log10'.
    
class BoxMueller:
  call_count = 0;
  second_random_variable = 0.0;
    
  @classmethod
  def randn( cls ):
    cls.call_count += 1;

    # If this function has been called an even number of
    # times, then on the previous call, two random variables
    # were generated, so the one of those two stored in the
    # class varible 'second_random_variable' can be returned.

    if cls.call_count%2 == 0:
      return cls.second_random_variable;
    
    # Need to ensure the number is in (0, 1], not [0, 1)
    u1 = 1.0 - random.random();
    u2 = 1.0 - random.random();
    
    c = math.sqrt( -2.0*math.log(u1) );
    
    # Store one of the two random variables,
    #    and return the other
    cls.second_random_variable = c*math.sin( 2*math.pi*u2 );
    return c*math.cos( 2*math.pi*u2 );
    
# Create a list holding 16 entries
white_noise = [None] * 16
    
# :-)
# Assign to each of these 16 entries a normally distributed random variable
# You can access these 16 entries by using white_noise[0] through
# white_noise[15]

seed = 1234567
#random.seed( seed )      # You will have to repeatedly change this seed
WhiteNoiseList = [[0]*16,[0]*16,[0]*16,[0]*16,[0]*16]
for j in range(0, 5):
    if j == 0:
        seed = 1122334
    elif j == 1:
        seed = 1234567
    elif j == 2:
        seed = 7654321
    elif j == 3:
        seed = 1738344
    elif j == 4:
        seed = 7373123
    print("Seed", seed)
    random.seed( seed ) 
    for i in range( 0, 16 ):
        white_noise[i] = BoxMueller.randn();
        WhiteNoiseList[j][i] = BoxMueller.randn();
    

# Print it out, so that the user can convince one's self that they are
# apparently normally distributed with mean '0' and a standard deviation
# of '1'
two_norm_total = 0.0
total = 0.0
for j in range(0, len(white_noise)):
    total += white_noise[j]
    two_norm_total += white_noise[j]**2

two_norm = two_norm_total**(1/2)
average = total/16
def PrintVals():
    print("The values are:")
    print( white_noise )
    print("The 2 norm is: ")
    print(two_norm)
    print("The Average is: ")
    print(average)
    print("The Seed here is ")
    print(seed)
#PrintVals()

#Create the 17 vectors
base = [0]*16

s1 = [0]*16
s2 = [0]*16
s3 = [0]*16
s4 = [0]*16
s5 = [0]*16
s6 = [0]*16
s7 = [0]*16
s8 = [0]*16

c1 = [0]*16
c2 = [0]*16
c3 = [0]*16
c4 = [0]*16
c5 = [0]*16
c6 = [0]*16
c7 = [0]*16
c8 = [0]*16

#Assign the correct values to the vectors
for x in range(0,16):
    base[x] = 1
    
    s1[x] = math.sin(2*math.pi*1*((x+0.5)/16))
    s2[x] = math.sin(2*math.pi*2*((x+0.5)/16))
    s3[x] = math.sin(2*math.pi*3*((x+0.5)/16))
    s4[x] = math.sin(2*math.pi*4*((x+0.5)/16))
    s5[x] = math.sin(2*math.pi*5*((x+0.5)/16))
    s6[x] = math.sin(2*math.pi*6*((x+0.5)/16))
    s7[x] = math.sin(2*math.pi*7*((x+0.5)/16))
    s8[x] = math.sin(2*math.pi*8*((x+0.5)/16))
    
    c1[x] = math.cos(2*math.pi*1*((x+0.5)/16))
    c2[x] = math.cos(2*math.pi*2*((x+0.5)/16))
    c3[x] = math.cos(2*math.pi*3*((x+0.5)/16))
    c4[x] = math.cos(2*math.pi*4*((x+0.5)/16))
    c5[x] = math.cos(2*math.pi*5*((x+0.5)/16))
    c6[x] = math.cos(2*math.pi*6*((x+0.5)/16))
    c7[x] = math.cos(2*math.pi*7*((x+0.5)/16))
    c8[x] = math.cos(2*math.pi*8*((x+0.5)/16))



#Print out the vectors for analysis
#print("base")
#print(base)

#print("s1")
#print(s1)
#print("s2")
#print(s2)
#print("s3")
#print(s3)
#print("s4")
#print(s4)
#print("s5")
#print(s5)
#print("s6")
#print(s6)
#print("s7")
#print(s7)
#print("s8")
#print(s8)

#print("c1")
#print(c1)
#print("c2")
#print(c2)
#print("c3")
#print(c3)
#print("c4")
#print(c4)
#print("c5")
#print(c5)
#print("c6")
#print(c6)
#print("c7")
#print(c7)
#print("c8")
#print(c8)
#Create variables that are needed
totals = [0]*16
two_norms = [0]*16
VectorList = [base, s1, s2, s3, s4, s5, s6, s7, s8, c1, c2, c3, c4, c5, c6, c7]

#Assign a total for each vector and then calculate it's 2norm
for z in range(0,16):
    for y in range(0, 16):
        totals[z] += math.pow(VectorList[z][y], 2)

for x in range(0,16):
    two_norms[x] = math.sqrt(totals[x])

def print2Norms():
    #Print the 2 norms of each vector
    print("2 Norms of the vectors")
    for i in range(0, 16):
        if i == 0:
            print("2 norm of The 1 vector")
            print(two_norms[i])
        elif i < 9:
            print("2 norm of S", i)
            print(two_norms[i])
        else:
            print("2 norm of C", i-8)
            print(two_norms[i])
#print2Norms()

#Normalize each vector
#************************************************
for x in range(0,16):
    for y in range(0, 16):
        VectorList[x][y] = (VectorList[x][y]/two_norms[x])
        
        
def printNormalizedVectors():
    print("The following vectors are the normalized versions of the vectors")
    for i in range(0, 16):
        if i == 0:
            print("The 1 vector")
            print(VectorList[i])
        elif i < 9:
            print("S", i)
            print(VectorList[i])
        else:
            print("C", i-8)
            print(VectorList[i])
#printNormalizedVectors()
#************************************************

#                 Q5
# INNER PRODUCTS ################################
innproducts = [0]*8
for h in range(0, 8):
    for k in range(0, 16):
        if h > 0:
            innproducts[h] += VectorList[h][k]*VectorList[16-h][k]
        else:
            innproducts[h] += base[k]*s8[k]
    
def printInnerProducts():   
    for i in range(0, 8):
        print("Innerproduct: ", (i),(innproducts[i]))
#printInnerProducts()
# Note, the innerproducts that are not exactly zero
# are innerproducts of differing frequencies, that is
# if the frequencies are the same then the inner product will
# be zero. This means the functions sin and cos when having
# the same frequency are orthagonal.
#************************************************


#QUESTION 6 ####################################
def coefficients(normalized_vector):
    InnerProduct = 0
    for x in range(0, 5):
        for y in range(0, 16):
            InnerProduct += WhiteNoiseList[x][y]*normalized_vector[y]
            #InnerProudct = <u, v> in the end
        print("Inner Product: ", (x+1), InnerProduct)
        InnerProduct = 0
def print_coefficients():
    for q in range(0, 16):
        if q == 0:
            print("Inner Products with the normalized base")
        elif q < 9:
            print("Inner Products with normalized vector: s", q)
        elif q > 8:
            print("Inner Products with normalized vector: c", (q-8))
        coefficients(VectorList[q])
#print_coefficients()
# My prediction would be that the smallest coefficients will be with the all 
# ones vector. I say this because the all ones vector's 2 norm is the smallest
# in comparison to all the others.
# ----
# After testing, the results do match my prediction.
#************************************************



#Question 7########################################
signal = [0]*16
two_norm_signal = 0
for i in range(0, 16):
    signal[i] = 25*math.sin(2*math.pi*4*(i+0.5)/16+math.pi/4)
    two_norm_signal += signal[i]**2
two_norm_signal = math.sqrt(two_norm_signal)
def innperoductsWithSignal(normalized_vector, signals):
    Innerproduct = 0
    for y in range(0, 16):
        Innerproduct += signals[y]*normalized_vector[y]
 #   print("Coefficient: ",  Innerproduct)
#print("two_norm", two_norm_signal)
#def print_coefficients_with_signal(signals):
#    for q in range(0, 16):
#        if q == 0:
#            print("Coefficients with the normalized base and signal")
#        elif q < 9:
#            print("Coefficients with normalized vector: s and signal", q)
#        elif q > 8:
#            print("Coefficients with normalized vector: c and signal", (q-8))
#        innperoductsWithSignal(VectorList[q], signals)
#print_coefficients_with_signal(signal)
# We notice that there are coefficients that stand out for this example being 50,
# we can also notice that 50 is the result of multiplying the amplitude of the 
# vectors by two. To test this I changed the amplitude to 30 and got a coefficient
# of 60. This means the coefficient that stands out is the amplitude times 2. The other
# relationship is that the frequency that stands out is the same frequency chosen for
# the signal vector. The relationship with these values and the two norm is that
# the 2 norm is equal to the square root of the sum of their squares. That is the cos
# and sin functions are orthagonal and all other values that don't stand out are ~zero,
# using pythagorean theorum we can deduce that the hypotenuse is the 2 norm.
#************************************************



def InnerproductsList(normalized_vector, signals):
    Innerproduct = 0
    for y in range(0, 16):
        Innerproduct += (signals[y]*normalized_vector[y])
    return Innerproduct
innerproducts = 0
for q in range(0,16):
    innerproducts += (InnerproductsList(VectorList[q], signal))**2


#**************************************************************8
#Question 8
signal2 = [0]*16
two_norm_signal = 0
for x in range(0, 16):
    signal2[x] = math.sin(2*math.pi*4.3*(x+0.5)/16)
    two_norm_signal += signal2[x]**2
#for y in range(0, 16):
#    if y == 0:
#            print("Coefficients with base and signal")
#    elif y < 9:
#            print("Coefficients with  s", y)
#    elif y > 8:
#            print("Coefficients with c", (y-8))
#    print("Coefficient",numpy.dot(VectorList[y], signal2))
# The relationship here is the coeffecient that stands out will reveal
# the range that the frequency falls under. In this example using 4.3 as our
# frequency, as a result the coefficients that stand out are at cos and sin of 4.
# Another thing to notice is that when using the sin function for our signal the larger
# value will be at the opposite (cos) function. If we switch it to a cos function, the 
# larger value is again, at the opposite (sin now) function.
#**************************************************************





#Question 9
Heart_Beat_With_White_Noise = [-1.90, -6.05, -2.48, 2.82, -.324, 3.99, 5.22, -2.90, -.599, -1.64, -3.76, -2.97, 3.39, 4.23, 3.26, 3.35]
Heart_Beat_Normalized = [0]*16
two_norm_heart_beat = 0
#for y in range(0, 16):
#    if y == 0:
#            print("Coefficients with base and signal")
#    elif y < 9:
#            print("Coefficients with  s", y)
#    elif y > 8:
#            print("Coefficients with c", (y-8))
#    print("Coefficient",numpy.dot(VectorList[y], Heart_Beat_With_White_Noise))
#    two_norm_heart_beat += (numpy.dot(VectorList[y], Heart_Beat_With_White_Noise))**2
    
#print("Amplitude: ",math.sqrt(two_norm_heart_beat))
# Assumptions made :
# - The heartbeats are cos and sin functions respectively
# - What ever has a faster frequency is the fetus' heartbeat
#
# Note - I cannot deduce the exact frequencies from the data provided (yet) so
# the frequencies in the final eqautions will be rounded to the nearest integer
#
# We take note of the coefficients that stand out and those are the
# frequencies for the sin and cos functions respectively, now for the Amplitude,
# the amplitude for each functions are going to be the the 2 norm of their sin and 
# cos components. Similarly to what we found out in q7 we take the square root of the
# sums of squares of each component.
# 
# Another thing to note is that if the larger side of the component is for example at
# the sin, our final function with that frequency will be cos, which uses another
# aspect we found out from q7.
#
# Finally using what we find out from q10, we are going to add 10 to the frequencies.
# This is because the frequencies given are not really realistic.
#
# The two equations are :
#
#    6.515033488 * sin( 15x )  and    10.98475816 * cos( 12x )
#
# From these two functionds we can assume that the fetus' hearbeat will be 
# at faster frequency than the mothers, therefore, the baby's heartbeat is the sin function
# and the mother's heartbeat is the cos function. This also works out nicely because
# it would make sense having the mothers amplitude larger than the fetus'



#Question 10
signal3 = [0]*16
two_norm_signal = 0
for x in range(0, 16):
    signal3[x] = math.cos(2*math.pi*13*(x+0.5)/16)
    two_norm_signal += signal3[x]**2
for y in range(0, 16):
    if y == 0:
            print("Coefficients with base and signal")
    elif y < 9:
            print("Coefficients with  s", y)
    elif y > 8:
            print("Coefficients with c", (y-8))
    print("Coefficient",numpy.dot(VectorList[y], signal3))
# From the data we observe that the coefficient that stands out is 
# the coefficient with cos at frequency 3. We could assume that if we
# only see one coefficient that stands out and all other coefficients are
# close to zero then the frequency is 10 + the frequency that had the 
# largest coefficient.














#############################################################################
    
question_10_signal = {\
  -0.1591651345, -0.9730117519, -0.5855458235, 0.5248543817, \
   0.9872519740,  0.2307555723, -0.8106393076, -0.8511920292,\
   0.1591651223,  0.9730117520,  0.5855458262, -0.5248543789,\
  -0.9872519761, -0.2307555755,  0.8106393115,  0.8511920414}
    
#############################################################################

# We are sampling the sinusoids         1
#                               cos(    x ) sin(    x )
#                               cos(  2 x ) sin(  2 x )
#                               cos(  3 x ) sin(  3 x )
#                               cos(  4 x ) sin(  4 x )
#                               cos(  5 x ) sin(  5 x )
#                               cos(  6 x ) sin(  6 x )
#                               cos(  7 x ) sin(  7 x )
#                               cos(  8 x ) sin(  8 x )
#
# sixteen times at equally spaced points on the interval [0, 2 pi]
#
# This assumes the signal we are reading does not have any frequencies
# that are greater than 8 cycles per period.
  
#############################################################################
# These should be values between 0 and 7 for cosine
#                    and between 1 and 8 for sine
#
# Note that if the frequency is "0", for cosine, this produces all ones
freq_1 = 3
freq_2 = 2
    
inner_product = 0.0

# You will be asked to replace these with normalized versions
for i in range( 0, 16 ):
  inner_product += math.cos( freq_1*2.0*math.pi*(i + 0.5)/16.0) \
                  *math.cos( freq_1*2.0*math.pi*(i + 0.5)/16.0)
    
#print( "%f" % inner_product )
    
freq_1 = 3;
    
inner_product = 0.0
for i in range( 0, 16 ):
  inner_product += math.cos( freq_1*2.0*math.pi*(i + 0.5)/16.0) \
                  *white_noise[i];
    
#print( "%f" % inner_product )